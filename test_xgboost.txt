import csv
import numpy as np
import pandas as pd
import scipy.stats as sp
from sklearn.linear_model import LogisticRegression
import xgboost as xgb
train1 = pd.read_csv(r'train_data.csv')
test1 = pd.read_csv(r'test_data.csv')
train2 = pd.read_csv(r'train_data_new_last2.csv')
test2 = pd.read_csv(r'test_data_new_last2.csv')
print('begin')

train = pd.merge(train1, train2, on=['id'], how='left')  #
test = pd.merge(test1, test2, on=['id'], how='left')  #

def xgb_model(train,test):
    train_x = train.drop(['id','click_w228'], axis=1).values
    train_y = train['click_w228'].values
    test_x = test.drop(['id'], axis=1).values

    xgb_train = xgb.DMatrix(train_x, label=train_y)
    xgb_test = xgb.DMatrix(test_x)

    params = {'booster': 'gbtree',
              'objective': 'binary:logistic',  # 
              
              #'objective': 'rank:pairwise',  # 二分类的问题
              # 'gamma':0.1,  # 用于控制是否后剪枝的参数,越大越保守，一般0.1、0.2这样子。
              'max_depth': 5,  # 构建树的深度，越大越容易过拟合
              # 'lambda':2,  # 控制模型复杂度的权重值的L2正则化项参数，参数越大，模型越不容易过拟合。
              'subsample': 0.7,  # 随机采样训练样本
              'colsample_bytree': 0.7,  # 生成树时进行的列采样
              'min_child_weight': 3,
              # 这个参数默认是 1，是每个叶子里面 h 的和至少是多少，对正负样本不均衡时的 0-1 分类而言
              # ，假设 h 在 0.01 附近，min_child_weight 为 1 意味着叶子节点中最少需要包含 100 个样本。
              # 这个参数非常影响结果，控制叶子节点中二阶导的和的最小值，该参数值越小，越容易 overfitting。
              'silent': 0,  # 设置成1则没有运行信息输出，最好是设置为0.
              'eta': 0.03,  # 如同学习率
              'nthread': 7,  # cpu 线程数
              'eval_metric': 'auc'  # 评价方式
              }

    plst = list(params.items())
    num_rounds = 900  # 迭代次数
    watchlist = [(xgb_train, 'train')]
    # early_stopping_rounds    当设置的迭代次数较大时，early_stopping_rounds 可在一定的迭代次数内准确率没有提升就停止训练
    model = xgb.train(plst, xgb_train, num_rounds, watchlist)
    pred_value = model.predict(xgb_test)

    return pred_value

k = xgb_model(train,test)

header = ['id','score']
#print(pred_users['id'])
k=pd.DataFrame(list(zip(test['id'],k)),columns=header)
k.to_csv('pred_new.csv',encoding='utf-8',index=False)
print(k)